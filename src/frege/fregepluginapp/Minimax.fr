-- inspired by http://www.cs.kent.ac.uk/people/staff/dat/miranda/whyfp90.pdf

module fregepluginapp.Minimax where

playerX =  1                        -- would be nicer to make those enums of a proper datatype (?)
playerO = -1
blank   =  0

data Board = Board [Int]            -- each board is a 0..8 list of placements: playerX, playerO, or blank

data Tree a = Node a [Tree a]       -- a Rose Tree

-- in replacement of the fold-based definition of mapTree (we could also make it a Functor instance)
mapTree :: (a -> b) -> Tree a -> Tree b
mapTree f (Node a [])       = Node (f a) []
mapTree f (Node a children) = Node (f a) (map (mapTree f) children)

-- who's turn is it to do the next move? Just count the moves.
whosTurn :: Board -> Int
whosTurn (Board fields) = if even numOfMoves then playerX else playerO where
    numOfMoves = sum $ map abs fields

-- all possible boards that can arise from applying a valid move onto the current board
moves :: Board -> [Board]
moves (now @ Board fields)
    | hasWon now playerX = [] -- we have won  - no more valid moves
    | hasWon now playerO = [] -- we have lost - no more valid moves
    | otherwise = map Board (map fieldsWithPlayerPlacedAt blankIndexes) where
        fieldsWithIndex              = zip fields [1..]
        blankIndexes                 = [ i | (content,i) <- fieldsWithIndex, content == blank]
        fieldsWithPlayerPlacedAt pos = [ if i==pos then whosTurn now else content | (content,i) <- fieldsWithIndex]

-- a potentially endless repetition of a tree, where children are constructed by applying f to a.
repeatTree :: (a -> [a]) -> a -> Tree a
repeatTree f a = Node a (map (repeatTree f) (f a) )

-- the potentially endless game tree for a given board
gameTree :: Board -> Tree Board
gameTree b = repeatTree moves b

-- a static valuation of the board between -1 (playerX has lost) and 1 (playerX has won)
static :: Board -> Double
static (now @ Board fields)
    | hasWon now playerX =  1.0 -- well that could  be much more elaborate but we only consider wins ATM
    | hasWon now playerO = -1.0
    | otherwise          =  0.0

hasWon :: Board -> Int -> Bool
hasWon (Board fields) player =
    or [hasTriple row player | row <- [[0,1,2],[3,4,5],[6,7,8]] ]   ||
    or [hasTriple col player | col <- [[0,3,6],[1,4,7],[2,5,8]] ]   ||
    hasTriple [6,4,2] player                                        ||
    hasTriple [0,4,8] player where
        hasTriple indexes player = and [fields !! x == player | x <- indexes ]

-- The heart of the game:
-- the alpha-beta minimax algorithm on any tree of comparable labels (we will use Doubles).

maximize :: Ord a => Tree a -> a
maximize (Node a []) = a
maximize (Node a children) = maximum (map minimize children) -- what is the value of our best move

minimize :: Ord a => Tree a -> a
minimize (Node a []) = a
minimize (Node a children) = minimum (map maximize children) -- assuming the opponent does his best one

-- Creating the game tree from valid moves can lead to endless or at least very large trees.
-- Pruning the tree is a totally separate operation that will later limit the generation.

prune 0 (Node a children) = Node a []
prune n (Node a children) = Node a (map (prune (n-1)) children)

-- Evaluating a board that results from applying a move is a composition of creating a tree of valid
-- moves, limiting it, mapping the leaves to their static valuation and minimaxing the whole.
-- (As opposed to the paper, we use minimize, not maximize, to start the evaluation since we calculate the first
-- level of the tree ourselves in order to have the maximum move handily available.
-- Thus, the sequence of min/max starts one level below.)

evaluate :: Int -> Board -> Double
evaluate lookahead = minimize . mapTree static . prune lookahead . gameTree

-- -------------------     for integrating with the environment     --------------------------------

unBoard :: Board -> JArray Int
unBoard (Board fields) = arrayFromList fields

nextBoard :: Int -> JArray Int -> JArray Int -- a board is list of 9 integers: 1 White X, -1 Black O, 0 Empty
nextBoard lookahead inFields = unBoard bestMove where
    possibleMoves  = moves (Board inFields.toList)
    evaluatedMoves = map (\board -> (evaluate lookahead board, board)) possibleMoves
    bestMove       = snd $ fold maxBoardByEval noBoard evaluatedMoves where
        maxBoardByEval a b = if fst a > fst b then a else b
        noBoard = (-1, Board [])

